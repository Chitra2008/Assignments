-- Oracle bitmap index

SELECT 
    *
FROM
    members
WHERE
    gender = 'F';
    

SELECT 
    gender, count(*)
FROM
    members
group by
    gender
;  -- as here are only two distinct values , we can count it in low cardinality value

--Oracle has a special kind of index for these types of columns which is called a bitmap index.
--Oracle uses a mapping function to converts each bit in the bitmap to the corresponding rowid of the members table.

create bitmap index members_gender_i
on members(gender);

explain plan for
SELECT 
    *
FROM
    members
WHERE
    gender = 'F';
    
select
plan_table_output
from table(dbms_xplan.display());

--When to use Oracle bitmap indexes

    --you should use the bitmap index for the column that have low cardinality.
    
--LETS See the cardinality values from emp table;

select empno, count(empno) from emp group by empno;    
--AS U CAN SEE THERE ARE 14 VALUES , SO WE CAN COUNT EMPNO IN MAXIMUN CARDINALITY VALUES
select deptno , count(*) from emp group by deptno;
-- this can be count in low cv
select mgr, count(*) from emp group by mgr;

--BEFORE APPLYING INDEX

select * from emp where deptno = 30;

--NOW WE ARE APPLYING INDEX ON DEPTNO

create bitmap index deptno_index
on emp(deptno);

explain plan for 
select * from emp where deptno = 30;

select plan_table_output from table(dbms_xplan.display());

----------------------------------------------------------------------------------------------

--Infrequently updated or read-only tables

CREATE TABLE bitmap_index_demo(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    active NUMBER NOT NULL,
    PRIMARY KEY(id)
);


CREATE BITMAP INDEX bitmap_index_demo_active_i
ON bitmap_index_demo(active);

INSERT INTO bitmap_index_demo(active) 
VALUES(1);

INSERT INTO bitmap_index_demo(active) 
VALUES(0);

INSERT INTO bitmap_index_demo(active) 
VALUES(0);

select * from bitmap_index_demo;
























