CREATE TABLE "CUSTOMER_TBL"
(	"CUSTOMER_ID" NUMBER NOT NULL, 
	"CUSTOMER_NUMBER" VARCHAR2(100 BYTE) NOT NULL, 
    "CUSTOMER_NAME" VARCHAR2(100 BYTE) NOT NULL, 
    "CONTACT_NUMBER" VARCHAR2(100 BYTE), 
    "CUSTOMER_DOB" DATE,
    "CUSTOMER_ADDRESS" VARCHAR2(500 BYTE),
    PRIMARY KEY ("CUSTOMER_ID")
);
CREATE TABLE "PRODUCT_TBL"
(	"PRODUCT_ID" NUMBER NOT NULL, 
	"PRODUCT_NUMBER" VARCHAR2(100 BYTE) NOT NULL, 
    "PRODUCT_NAME" VARCHAR2(100 BYTE) NOT NULL, 
    "PRODUCT_DESCRIPTION" VARCHAR2(100 BYTE), 
    "PRODUCT_PRICE" NUMBER,
    PRIMARY KEY("PRODUCT_ID")
);
CREATE TABLE "PURCHASE_TBL"
(	"PURCHASE_ID" NUMBER NOT NULL, 
	"PURCHASE_NUMBER" VARCHAR2(100 BYTE) NOT NULL, 
    "CUSTOMER_ID" NUMBER, 
    "PRODUCT_ID" NUMBER, 
    PRIMARY KEY("PURCHASE_ID"),
    CONSTRAINT "PURCHASE_TBL_FK1" FOREIGN KEY ("CUSTOMER_ID")
	REFERENCES "CUSTOMER_TBL" ("CUSTOMER_ID") ON DELETE CASCADE ENABLE,
    CONSTRAINT "PURCHASE_TBL_FK2" FOREIGN KEY ("PRODUCT_ID")
	REFERENCES "PRODUCT_TBL" ("PRODUCT_ID") ON DELETE CASCADE ENABLE
);

CREATE SEQUENCE CUSTOMER_SEQ MINVALUE 1 MAXVALUE 99999999 START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PRODUCT_SEQ MINVALUE 1 MAXVALUE 99999999 START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE PURCHASE_SEQ MINVALUE 1 MAXVALUE 99999999 START WITH 1 INCREMENT BY 1;

create or replace TRIGGER "CUSTOMER_T1"
BEFORE INSERT ON CUSTOMER_TBL
FOR EACH ROW
WHEN (new.CUSTOMER_ID IS NULL) BEGIN
:new.CUSTOMER_ID := CUSTOMER_SEQ.NEXTVAL;
END;

create or replace TRIGGER "PRODUCT_T1"
BEFORE INSERT ON PRODUCT_TBL
FOR EACH ROW
WHEN (new.PRODUCT_ID IS NULL) BEGIN
:new.PRODUCT_ID := PRODUCT_SEQ.NEXTVAL;
END;

create or replace TRIGGER "PURCHASE_T1"
BEFORE INSERT ON PURCHASE_TBL
FOR EACH ROW
WHEN (new.PURCHASE_ID IS NULL) BEGIN
:new.PURCHASE_ID := PURCHASE_SEQ.NEXTVAL;
END;

Select distinct customers from the table
SELECT DISTINCT CUSTOMER_NAME FROM CUSTOMER_TBL;

List the customer with the product which they bought
customer name - product name
SELECT CUSTOMER_NAME,PRODUCT_NAME FROM CUSTOMER_TBL C JOIN PURCHASE_TBL P ON C.CUSTOMER_ID = P.CUSTOMER_ID JOIN PRODUCT_TBL PR ON PR.PRODUCT_ID = P.PRODUCT_ID ;

List the customers with the total Amount which they have to pay at billing counter(sort the data in Ascending order of Billing Amount)
SELECT CUSTOMER_NAME,SUM(PRODUCT_PRICE) FROM CUSTOMER_TBL C JOIN PURCHASE_TBL P ON C.CUSTOMER_ID = P.CUSTOMER_ID JOIN PRODUCT_TBL PR ON PR.PRODUCT_ID = P.PRODUCT_ID GROUP BY C.CUSTOMER_NAME;

List the customers whose age is more than 18 years.
SELECT * FROM CUSTOMER_TBL WHERE TRUNC(months_between(sysdate, CUSTOMER_DOB) / 12) > 18

List the customers who has not bought any product from the store.
select * from customer_tbl where customer_id not in (select customer_id from purchase_tbl);

Find the customers whose billing amount is between 2000 to 5000.
SELECT CUSTOMER_NAME FROM CUSTOMER_TBL C JOIN PURCHASE_TBL P ON C.CUSTOMER_ID = P.CUSTOMER_ID JOIN PRODUCT_TBL PR ON PR.PRODUCT_ID = P.PRODUCT_ID GROUP BY C.CUSTOMER_NAME having sum(product_price) between 2000 and 5000;

List the products which are not purchased by anyone.
select * from product_tbl where product_id not in(select product_id from purchase_tbl);

List the products, increased their price by 25% 
select product_id,product_price+(Product_price*25/100) from product_tbl;

Find those products whose name start with 'A' and six characters in length.
select * from product_tbl where product_name like 'A%' and length(product_name)=6;

Find those customers whose name ends with 'I' and third character must be 'R'. 
select * from product_tbl where product_name like '__R%I';

Perform join on 3 tables and display all the columns
SELECT * FROM CUSTOMER_TBL C JOIN PURCHASE_TBL P ON C.CUSTOMER_ID = P.CUSTOMER_ID JOIN PRODUCT_TBL PR ON PR.PRODUCT_ID = P.PRODUCT_ID;